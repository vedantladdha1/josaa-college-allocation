"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { useUser } from "@/contexts/UserContext"
import { toast } from "@/components/ui/use-toast"
import { cn } from "@/lib/utils"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

export function AllotmentResults() {
  const { preferences, isProfileComplete, arePreferencesSet } = useUser()
  const [currentRound, setCurrentRound] = useState(1)
  const [allotment, setAllotment] = useState<null | {
    institute: string
    program: string
    category: string
    status: string
  }>(null)
  const [action, setAction] = useState<"float" | "freeze" | null>(null)
  const [isWithdrawn, setIsWithdrawn] = useState(false)

  useEffect(() => {
    if (isProfileComplete && arePreferencesSet) {
      // Simulate random allotment
      const randomAllotment = () => {
        const randomPreference = preferences[Math.floor(Math.random() * preferences.length)]
        return {
          institute: randomPreference.institute.name,
          program: randomPreference.program.name,
          category: "General", // This should be based on the user's category
          status: "Allotted",
        }
      }

      if (currentRound === 1 || (currentRound > 1 && action === "float")) {
        setAllotment(randomAllotment())
        setAction(null)
      }
    }
  }, [currentRound, action, isProfileComplete, arePreferencesSet, preferences])

  const handleAction = (selectedAction: "float" | "freeze") => {
    if (!allotment) return

    setAction(selectedAction)
    if (selectedAction === "freeze") {
      toast({
        title: "Seat Frozen",
        description: `Congratulations! You have selected ${allotment.program} at ${allotment.institute}.`,
      })
    } else {
      toast({
        title: "Floating to Higher Preferences",
        description: "You will participate in further rounds. Your current allotment is now void.",
      })
    }
  }

  const handleWithdraw = () => {
    if (window.confirm("Are you sure you want to withdraw from JOSAA? This action cannot be undone.")) {
      setIsWithdrawn(true)
      setPreferences([]) // Clear all preferences
      toast({
        title: "Withdrawn from JOSAA",
        description:
          "You have successfully withdrawn from JOSAA. You will not be able to participate in any further rounds.",
        variant: "destructive",
      })
    }
  }

  if (!isProfileComplete || !arePreferencesSet) {
    return (
      <div className="max-w-4xl mx-auto">
        <h2 className="text-2xl font-bold mb-6">Allotment Results</h2>
        <div className="bg-white rounded-lg shadow p-6">
          <Alert variant="destructive">
            <AlertTitle>Action Required</AlertTitle>
            <AlertDescription>
              Please complete your profile and set your preferences before viewing allotment results.
            </AlertDescription>
          </Alert>
        </div>
      </div>
    )
  }

  return (
    <div className="max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-6">Allotment Results</h2>
      <div className="bg-white rounded-lg shadow p-6">
        <div className="mb-6">
          <label className="block text-sm font-medium mb-1">Round</label>
          <select
            value={currentRound}
            onChange={(e) => setCurrentRound(Number(e.target.value))}
            className="w-full md:w-auto p-2 border rounded"
          >
            {[1, 2, 3, 4, 5, 6].map((round) => (
              <option key={round} value={round}>
                Round {round}
              </option>
            ))}
          </select>
        </div>

        <div className="space-y-4">
          {allotment ? (
            <>
              <div
                className={cn(
                  "p-4 border rounded-lg",
                  action === "freeze"
                    ? "bg-green-50 border-green-200"
                    : action === "float"
                      ? "bg-yellow-50 border-yellow-200"
                      : "bg-blue-50 border-blue-200",
                )}
              >
                <h3 className="font-semibold text-lg mb-2">Current Allotment</h3>
                <div className="grid gap-2">
                  <p>
                    <span className="font-medium">Institute:</span> {allotment.institute}
                  </p>
                  <p>
                    <span className="font-medium">Program:</span> {allotment.program}
                  </p>
                  <p>
                    <span className="font-medium">Category:</span> {allotment.category}
                  </p>
                  <p>
                    <span className="font-medium">Status:</span>{" "}
                    {action === "float" ? "Not Accepted" : allotment.status}
                  </p>
                </div>
              </div>

              {action && (
                <Alert>
                  <AlertTitle>{action === "freeze" ? "Seat Frozen" : "Floating to Higher Preferences"}</AlertTitle>
                  <AlertDescription>
                    {action === "freeze"
                      ? `You have selected ${allotment.program} at ${allotment.institute}.`
                      : "You will participate in further rounds. Your current allotment is now void."}
                  </AlertDescription>
                </Alert>
              )}

              <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg">
                <h3 className="font-semibold text-lg mb-2">Actions Required</h3>
                <div className="space-y-2">
                  {!isWithdrawn && (
                    <>
                      <Button
                        className="w-full md:w-auto"
                        variant={action === "float" ? "default" : "outline"}
                        onClick={() => handleAction("float")}
                        disabled={currentRound === 6}
                      >
                        Float to Higher Preferences
                      </Button>
                      <Button
                        className="w-full md:w-auto"
                        variant={action === "freeze" ? "default" : "outline"}
                        onClick={() => handleAction("freeze")}
                      >
                        Freeze Current Seat
                      </Button>
                    </>
                  )}
                  {!isWithdrawn ? (
                    <Button className="w-full md:w-auto" variant="outline" onClick={handleWithdraw}>
                      Withdraw from JOSAA
                    </Button>
                  ) : (
                    <p className="text-red-500 font-semibold">
                      You have withdrawn from JOSAA and cannot participate in further rounds.
                    </p>
                  )}
                </div>
              </div>
            </>
          ) : (
            <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <p className="text-lg font-medium text-yellow-800">No allotment in this round</p>
              <p className="mt-2 text-yellow-700">
                You haven't been allotted a seat in this round. Please wait for the next round or check your
                preferences.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

